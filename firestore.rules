/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict ownership model, where each top-level collection is only accessible to authenticated users.
 *
 * Data Structure:
 * The data is organized into top-level collections for each entity:
 * `/alunos/{alunoId}`, `/escolas/{escolaId}`, `/turmas/{turmaId}`, `/provas/{provaId}`,
 * `/questoes/{questaoId}`, `/respostas_oficiais/{respostaOficialId}`,
 * `/respostas_alunos/{respostaAlunoId}`, `/correcoes/{correcaoId}`, and `/resultados/{resultadoId}`.
 *
 * Key Security Decisions:
 * - Listing of documents is restricted.
 * - Write access is restricted to authenticated users.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(resourceId) {
      return request.auth.uid == resourceId;
    }

    function isExistingOwner(resourceId) {
        return isSignedIn() && isOwner(resourceId) && resource != null;
    }

    /**
     * @description Controls access to the /alunos collection.
     * @path /alunos/{alunoId}
     * @allow (create) - Allow an authenticated user to create an aluno document where the alunoId matches their UID.
     * @allow (get, update, delete) - Allow an authenticated user to get, update, or delete an existing aluno document where the alunoId matches their UID.
     * @deny (create) - Deny an unauthenticated user from creating an aluno document.
     * @deny (update, delete) - Deny an authenticated user from updating or deleting an aluno document where the alunoId does not match their UID.
     * @principle Enforces document ownership for all writes.
     */
    match /alunos/{alunoId} {
      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn() && isOwner(alunoId) && request.resource.data.id == alunoId;
      allow update: if isExistingOwner(alunoId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(alunoId);
    }

    /**
     * @description Controls access to the /escolas collection.
     * @path /escolas/{escolaId}
     * @allow (create) - Allow an authenticated user to create an escola document where the escolaId matches their UID.
     * @allow (get, update, delete) - Allow an authenticated user to get, update, or delete an existing escola document where the escolaId matches their UID.
     * @deny (create) - Deny an unauthenticated user from creating an escola document.
     * @deny (update, delete) - Deny an authenticated user from updating or deleting an escola document where the escolaId does not match their UID.
     * @principle Enforces document ownership for all writes.
     */
    match /escolas/{escolaId} {
      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn() && isOwner(escolaId) && request.resource.data.id == escolaId;
      allow update: if isExistingOwner(escolaId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(escolaId);
    }

    /**
     * @description Controls access to the /turmas collection.
     * @path /turmas/{turmaId}
     * @allow (create) - Allow an authenticated user to create a turma document where the turmaId matches their UID.
     * @allow (get, update, delete) - Allow an authenticated user to get, update, or delete an existing turma document where the turmaId matches their UID.
     * @deny (create) - Deny an unauthenticated user from creating a turma document.
     * @deny (update, delete) - Deny an authenticated user from updating or deleting a turma document where the turmaId does not match their UID.
     * @principle Enforces document ownership for all writes.
     */
    match /turmas/{turmaId} {
      allow get: if false;
      allow list: if isSignedIn();
      allow create: if isSignedIn() && isOwner(turmaId) && request.resource.data.id == turmaId;
      allow update: if isExistingOwner(turmaId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(turmaId);
    }

    /**
     * @description Controls access to the /provas collection.
     * @path /provas/{provaId}
     * @allow (create) - Allow an authenticated user to create a prova document where the provaId matches their UID.
     * @allow (get, update, delete) - Allow an authenticated user to get, update, or delete an existing prova document where the provaId matches their UID.
     * @deny (create) - Deny an unauthenticated user from creating a prova document.
     * @deny (update, delete) - Deny an authenticated user from updating or deleting a prova document where the provaId does not match their UID.
     * @principle Enforces document ownership for all writes.
     */
    match /provas/{provaId} {
      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn() && isOwner(provaId) && request.resource.data.id == provaId;
      allow update: if isExistingOwner(provaId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(provaId);
    }

    /**
     * @description Controls access to the /questoes collection.
     * @path /questoes/{questaoId}
     * @allow (create) - Allow an authenticated user to create a questao document where the questaoId matches their UID.
     * @allow (get, update, delete) - Allow an authenticated user to get, update, or delete an existing questao document where the questaoId matches their UID.
     * @deny (create) - Deny an unauthenticated user from creating a questao document.
     * @deny (update, delete) - Deny an authenticated user from updating or deleting a questao document where the questaoId does not match their UID.
     * @principle Enforces document ownership for all writes.
     */
    match /questoes/{questaoId} {
      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn() && isOwner(questaoId) && request.resource.data.id == questaoId;
      allow update: if isExistingOwner(questaoId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(questaoId);
    }

    /**
     * @description Controls access to the /respostas_oficiais collection.
     * @path /respostas_oficiais/{respostaOficialId}
     * @allow (create) - Allow an authenticated user to create a respostaOficial document where the respostaOficialId matches their UID.
     * @allow (get, update, delete) - Allow an authenticated user to get, update, or delete an existing respostaOficial document where the respostaOficialId matches their UID.
     * @deny (create) - Deny an unauthenticated user from creating a respostaOficial document.
     * @deny (update, delete) - Deny an authenticated user from updating or deleting a respostaOficial document where the respostaOficialId does not match their UID.
     * @principle Enforces document ownership for all writes.
     */
    match /respostas_oficiais/{respostaOficialId} {
      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn() && isOwner(respostaOficialId) && request.resource.data.id == respostaOficialId;
      allow update: if isExistingOwner(respostaOficialId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(respostaOficialId);
    }

    /**
     * @description Controls access to the /respostas_alunos collection.
     * @path /respostas_alunos/{respostaAlunoId}
     * @allow (create) - Allow an authenticated user to create a respostaAluno document where the respostaAlunoId matches their UID.
     * @allow (get, update, delete) - Allow an authenticated user to get, update, or delete an existing respostaAluno document where the respostaAlunoId matches their UID.
     * @deny (create) - Deny an unauthenticated user from creating a respostaAluno document.
     * @deny (update, delete) - Deny an authenticated user from updating or deleting a respostaAluno document where the respostaAlunoId does not match their UID.
     * @principle Enforces document ownership for all writes.
     */
    match /respostas_alunos/{respostaAlunoId} {
      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn() && isOwner(respostaAlunoId) && request.resource.data.id == respostaAlunoId;
      allow update: if isExistingOwner(respostaAlunoId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(respostaAlunoId);
    }

    /**
     * @description Controls access to the /correcoes collection.
     * @path /correcoes/{correcaoId}
     * @allow (create) - Allow an authenticated user to create a correcao document where the correcaoId matches their UID.
     * @allow (get, update, delete) - Allow an authenticated user to get, update, or delete an existing correcao document where the correcaoId matches their UID.
     * @deny (create) - Deny an unauthenticated user from creating a correcao document.
     * @deny (update, delete) - Deny an authenticated user from updating or deleting a correcao document where the correcaoId does not match their UID.
     * @principle Enforces document ownership for all writes.
     */
    match /correcoes/{correcaoId} {
      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn() && isOwner(correcaoId) && request.resource.data.id == correcaoId;
      allow update: if isExistingOwner(correcaoId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(correcaoId);
    }

    /**
     * @description Controls access to the /resultados collection.
     * @path /resultados/{resultadoId}
     * @allow (create) - Allow an authenticated user to create a resultado document where the resultadoId matches their UID.
     * @allow (get, update, delete) - Allow an authenticated user to get, update, or delete an existing resultado document where the resultadoId matches their UID.
     * @deny (create) - Deny an unauthenticated user from creating a resultado document.
     * @deny (update, delete) - Deny an authenticated user from updating or deleting a resultado document where the resultadoId does not match their UID.
     * @principle Enforces document ownership for all writes.
     */
    match /resultados/{resultadoId} {
      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn() && isOwner(resultadoId) && request.resource.data.id == resultadoId;
      allow update: if isExistingOwner(resultadoId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(resultadoId);
    }
  }
}