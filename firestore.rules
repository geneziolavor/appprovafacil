/**
  * @fileOverview
  * Core Philosophy: This ruleset enforces a strict ownership model. Each top-level collection
  * is restricted to owner-only access.
  *
  * Data Structure: The Firestore database consists of several top-level collections, each
  * representing a core entity (Aluno, Escola, Turma, Prova, Questao, RespostaOficial,
  * RespostaAluno, Correcao, and Resultado). Each document within these collections is
  * identified by a unique ID.
  *
  * Key Security Decisions:
  *  - Listing of any collection is disallowed to prevent unauthorized data discovery.
  *  - All write operations (create, update, delete) require the user to be the owner of the
  *    document, as identified by the document ID matching the authenticated user's UID.
  *  - Data shape validation is relaxed to allow for rapid prototyping.
  */
 

 rules_version = '2';
 service cloud.firestore {
  match /databases/{database}/documents {
 

  /**
   * @description Controls access to the 'alunos' collection. Only the user whose ID matches the 'alunoId' can read or write.
   * @path /alunos/{alunoId}
   * @allow (create) - Authenticated user '1BK1VzkYvUgroBnAZw9BoVeCi922' can create a document with ID '1BK1VzkYvUgroBnAZw9BoVeCi922'.
   * @deny (create) - Authenticated user 'OTHER_UID' cannot create a document with ID '1BK1VzkYvUgroBnAZw9BoVeCi922'.
   * @principle Enforces document ownership for writes.
   */
  match /alunos/{alunoId} {
  function isSignedIn() {
  return request.auth != null;
  }
 

  function isOwner(alunoId) {
  return isSignedIn() && request.auth.uid == alunoId;
  }
 

  function isExistingOwner(alunoId) {
  return isOwner(alunoId) && resource != null;
  }
 

  allow get: if isOwner(alunoId);
  allow list: if false;
  allow create: if isOwner(alunoId);
  allow update: if isExistingOwner(alunoId);
  allow delete: if isExistingOwner(alunoId);
  }
 

  /**
   * @description Controls access to the 'escolas' collection. Only the user whose ID matches the 'escolaId' can read or write.
   * @path /escolas/{escolaId}
   * @allow (create) - Authenticated user '1BK1VzkYvUgroBnAZw9BoVeCi922' can create a document with ID '1BK1VzkYvUgroBnAZw9BoVeCi922'.
   * @deny (create) - Authenticated user 'OTHER_UID' cannot create a document with ID '1BK1VzkYvUgroBnAZw9BoVeCi922'.
   * @principle Enforces document ownership for writes.
   */
  match /escolas/{escolaId} {
  function isSignedIn() {
  return request.auth != null;
  }
 

  function isOwner(escolaId) {
  return isSignedIn() && request.auth.uid == escolaId;
  }
 

  function isExistingOwner(escolaId) {
  return isOwner(escolaId) && resource != null;
  }
 

  allow get: if isOwner(escolaId);
  allow list: if false;
  allow create: if isOwner(escolaId);
  allow update: if isExistingOwner(escolaId);
  allow delete: if isExistingOwner(escolaId);
  }
 

  /**
   * @description Controls access to the 'turmas' collection. Only the user whose ID matches the 'turmaId' can read or write.
   * @path /turmas/{turmaId}
   * @allow (create) - Authenticated user '1BK1VzkYvUgroBnAZw9BoVeCi922' can create a document with ID '1BK1VzkYvUgroBnAZw9BoVeCi922'.
   * @deny (create) - Authenticated user 'OTHER_UID' cannot create a document with ID '1BK1VzkYvUgroBnAZw9BoVeCi922'.
   * @principle Enforces document ownership for writes.
   */
  match /turmas/{turmaId} {
  function isSignedIn() {
  return request.auth != null;
  }
 

  function isOwner(turmaId) {
  return isSignedIn() && request.auth.uid == turmaId;
  }
 

  function isExistingOwner(turmaId) {
  return isOwner(turmaId) && resource != null;
  }
 

  allow get: if isOwner(turmaId);
  allow list: if false;
  allow create: if isOwner(turmaId);
  allow update: if isExistingOwner(turmaId);
  allow delete: if isExistingOwner(turmaId);
  }
 

  /**
   * @description Controls access to the 'provas' collection. Only the user whose ID matches the 'provaId' can read or write.
   * @path /provas/{provaId}
   * @allow (create) - Authenticated user '1BK1VzkYvUgroBnAZw9BoVeCi922' can create a document with ID '1BK1VzkYvUgroBnAZw9BoVeCi922'.
   * @deny (create) - Authenticated user 'OTHER_UID' cannot create a document with ID '1BK1VzkYvUgroBnAZw9BoVeCi922'.
   * @principle Enforces document ownership for writes.
   */
  match /provas/{provaId} {
  function isSignedIn() {
  return request.auth != null;
  }
 

  function isOwner(provaId) {
  return isSignedIn() && request.auth.uid == provaId;
  }
 

  function isExistingOwner(provaId) {
  return isOwner(provaId) && resource != null;
  }
 

  allow get: if isOwner(provaId);
  allow list: if false;
  allow create: if isOwner(provaId);
  allow update: if isExistingOwner(provaId);
  allow delete: if isExistingOwner(provaId);
  }
 

  /**
   * @description Controls access to the 'questoes' collection. Only the user whose ID matches the 'questaoId' can read or write.
   * @path /questoes/{questaoId}
   * @allow (create) - Authenticated user '1BK1VzkYvUgroBnAZw9BoVeCi922' can create a document with ID '1BK1VzkYvUgroBnAZw9BoVeCi922'.
   * @deny (create) - Authenticated user 'OTHER_UID' cannot create a document with ID '1BK1VzkYvUgroBnAZw9BoVeCi922'.
   * @principle Enforces document ownership for writes.
   */
  match /questoes/{questaoId} {
  function isSignedIn() {
  return request.auth != null;
  }
 

  function isOwner(questaoId) {
  return isSignedIn() && request.auth.uid == questaoId;
  }
 

  function isExistingOwner(questaoId) {
  return isOwner(questaoId) && resource != null;
  }
 

  allow get: if isOwner(questaoId);
  allow list: if false;
  allow create: if isOwner(questaoId);
  allow update: if isExistingOwner(questaoId);
  allow delete: if isExistingOwner(questaoId);
  }
 

  /**
   * @description Controls access to the 'respostas_oficiais' collection. Only the user whose ID matches the 'respostaOficialId' can read or write.
   * @path /respostas_oficiais/{respostaOficialId}
   * @allow (create) - Authenticated user '1BK1VzkYvUgroBnAZw9BoVeCi922' can create a document with ID '1BK1VzkYvUgroBnAZw9BoVeCi922'.
   * @deny (create) - Authenticated user 'OTHER_UID' cannot create a document with ID '1BK1VzkYvUgroBnAZw9BoVeCi922'.
   * @principle Enforces document ownership for writes.
   */
  match /respostas_oficiais/{respostaOficialId} {
  function isSignedIn() {
  return request.auth != null;
  }
 

  function isOwner(respostaOficialId) {
  return isSignedIn() && request.auth.uid == respostaOficialId;
  }
 

  function isExistingOwner(respostaOficialId) {
  return isOwner(respostaOficialId) && resource != null;
  }
 

  allow get: if isOwner(respostaOficialId);
  allow list: if false;
  allow create: if isOwner(respostaOficialId);
  allow update: if isExistingOwner(respostaOficialId);
  allow delete: if isExistingOwner(respostaOficialId);
  }
 

  /**
   * @description Controls access to the 'respostas_alunos' collection. Only the user whose ID matches the 'respostaAlunoId' can read or write.
   * @path /respostas_alunos/{respostaAlunoId}
   * @allow (create) - Authenticated user '1BK1VzkYvUgroBnAZw9BoVeCi922' can create a document with ID '1BK1VzkYvUgroBnAZw9BoVeCi922'.
   * @deny (create) - Authenticated user 'OTHER_UID' cannot create a document with ID '1BK1VzkYvUgroBnAZw9BoVeCi922'.
   * @principle Enforces document ownership for writes.
   */
  match /respostas_alunos/{respostaAlunoId} {
  function isSignedIn() {
  return request.auth != null;
  }
 

  function isOwner(respostaAlunoId) {
  return isSignedIn() && request.auth.uid == respostaAlunoId;
  }
 

  function isExistingOwner(respostaAlunoId) {
  return isOwner(respostaAlunoId) && resource != null;
  }
 

  allow get: if isOwner(respostaAlunoId);
  allow list: if false;
  allow create: if isOwner(respostaAlunoId);
  allow update: if isExistingOwner(respostaAlunoId);
  allow delete: if isExistingOwner(respostaAlunoId);
  }
 

  /**
   * @description Controls access to the 'correcoes' collection. Only the user whose ID matches the 'correcaoId' can read or write.
   * @path /correcoes/{correcaoId}
   * @allow (create) - Authenticated user '1BK1VzkYvUgroBnAZw9BoVeCi922' can create a document with ID '1BK1VzkYvUgroBnAZw9BoVeCi922'.
   * @deny (create) - Authenticated user 'OTHER_UID' cannot create a document with ID '1BK1VzkYvUgroBnAZw9BoVeCi922'.
   * @principle Enforces document ownership for writes.
   */
  match /correcoes/{correcaoId} {
  function isSignedIn() {
  return request.auth != null;
  }
 

  function isOwner(correcaoId) {
  return isSignedIn() && request.auth.uid == correcaoId;
  }
 

  function isExistingOwner(correcaoId) {
  return isOwner(correcaoId) && resource != null;
  }
 

  allow get: if isOwner(correcaoId);
  allow list: if false;
  allow create: if isOwner(correcaoId);
  allow update: if isExistingOwner(correcaoId);
  allow delete: if isExistingOwner(correcaoId);
  }
 

  /**
   * @description Controls access to the 'resultados' collection. Only the user whose ID matches the 'resultadoId' can read or write.
   * @path /resultados/{resultadoId}
   * @allow (create) - Authenticated user '1BK1VzkYvUgroBnAZw9BoVeCi922' can create a document with ID '1BK1VzkYvUgroBnAZw9BoVeCi922'.
   * @deny (create) - Authenticated user 'OTHER_UID' cannot create a document with ID '1BK1VzkYvUgroBnAZw9BoVeCi922'.
   * @principle Enforces document ownership for writes.
   */
  match /resultados/{resultadoId} {
  function isSignedIn() {
  return request.auth != null;
  }
 

  function isOwner(resultadoId) {
  return isSignedIn() && request.auth.uid == resultadoId;
  }
 

  function isExistingOwner(resultadoId) {
  return isOwner(resultadoId) && resource != null;
  }
 

  allow get: if isOwner(resultadoId);
  allow list: if false;
  allow create: if isOwner(resultadoId);
  allow update: if isExistingOwner(resultadoId);
  allow delete: if isExistingOwner(resultadoId);
  }
  }
 }