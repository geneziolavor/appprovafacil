/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict data isolation model, where each top-level collection
 * is secured independently. It prioritizes simplicity and directness, aligning with the
 * application's CRUD-centric features.
 *
 * Data Structure:
 * The Firestore database consists of several top-level collections:
 * - /alunos/{alunoId}
 * - /escolas/{escolaId}
 * - /turmas/{turmaId}
 * - /provas/{provaId}
 * - /questoes/{questaoId}
 * - /respostas_oficiais/{respostaOficialId}
 * - /respostas_alunos/{respostaAlunoId}
 * - /correcoes/{correcaoId}
 * - /resultados/{resultadoId}
 *
 * Key Security Decisions:
 * - All top-level collections require authentication to read or write.
 * - List operations are enabled with authentication.
 * - No denormalization is required due to the simple, isolated nature of the data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Rules for the /alunos collection.  Requires the user to be authenticated to perform any operations.
     * @path /alunos/{alunoId}
     * @allow (create) Signed-in user can create a new aluno document.
     * @deny (create) User is not signed in, so cannot create a new aluno document.
     * @allow (get) Signed-in user can get an aluno document.
     * @deny (get) User is not signed in, so cannot get the aluno document.
     * @allow (list) Signed-in user can list all aluno documents.
     * @deny (list) User is not signed in, so cannot list the aluno documents.
     * @allow (update) Signed-in user can update an existing aluno document.
     * @deny (update) User is not signed in, so cannot update the aluno document.
     * @allow (delete) Signed-in user can delete an existing aluno document.
     * @deny (delete) User is not signed in, so cannot delete the aluno document.
     * @principle Enforces that users must be authenticated to access aluno documents.
     */
    match /alunos/{alunoId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Rules for the /escolas collection. Requires the user to be authenticated to perform any operations.
     * @path /escolas/{escolaId}
     * @allow (create) Signed-in user can create a new escola document.
     * @deny (create) User is not signed in, so cannot create a new escola document.
     * @allow (get) Signed-in user can get an escola document.
     * @deny (get) User is not signed in, so cannot get the escola document.
     * @allow (list) Signed-in user can list all escola documents.
     * @deny (list) User is not signed in, so cannot list the escola documents.
     * @allow (update) Signed-in user can update an existing escola document.
     * @deny (update) User is not signed in, so cannot update the escola document.
     * @allow (delete) Signed-in user can delete an existing escola document.
     * @deny (delete) User is not signed in, so cannot delete the escola document.
     * @principle Enforces that users must be authenticated to access escola documents.
     */
    match /escolas/{escolaId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Rules for the /turmas collection. Requires the user to be authenticated to perform any operations.
     * @path /turmas/{turmaId}
     * @allow (create) Signed-in user can create a new turma document.
     * @deny (create) User is not signed in, so cannot create a new turma document.
     * @allow (get) Signed-in user can get a turma document.
     * @deny (get) User is not signed in, so cannot get the turma document.
     * @allow (list) Signed-in user can list all turma documents.
     * @deny (list) User is not signed in, so cannot list the turma documents.
     * @allow (update) Signed-in user can update an existing turma document.
     * @deny (update) User is not signed in, so cannot update the turma document.
     * @allow (delete) Signed-in user can delete an existing turma document.
     * @deny (delete) User is not signed in, so cannot delete the turma document.
     * @principle Enforces that users must be authenticated to access turma documents.
     */
    match /turmas/{turmaId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Rules for the /provas collection. Requires the user to be authenticated to perform any operations.
     * @path /provas/{provaId}
     * @allow (create) Signed-in user can create a new prova document.
     * @deny (create) User is not signed in, so cannot create a new prova document.
     * @allow (get) Signed-in user can get a prova document.
     * @deny (get) User is not signed in, so cannot get the prova document.
     * @allow (list) Signed-in user can list all prova documents.
     * @deny (list) User is not signed in, so cannot list the prova documents.
     * @allow (update) Signed-in user can update an existing prova document.
     * @deny (update) User is not signed in, so cannot update the prova document.
     * @allow (delete) Signed-in user can delete an existing prova document.
     * @deny (delete) User is not signed in, so cannot delete the prova document.
     * @principle Enforces that users must be authenticated to access prova documents.
     */
    match /provas/{provaId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Rules for the /questoes collection. Requires the user to be authenticated to perform any operations.
     * @path /questoes/{questaoId}
     * @allow (create) Signed-in user can create a new questao document.
     * @deny (create) User is not signed in, so cannot create a new questao document.
     * @allow (get) Signed-in user can get a questao document.
     * @deny (get) User is not signed in, so cannot get the questao document.
     * @allow (list) Signed-in user can list all questao documents.
     * @deny (list) User is not signed in, so cannot list the questao documents.
     * @allow (update) Signed-in user can update an existing questao document.
     * @deny (update) User is not signed in, so cannot update the questao document.
     * @allow (delete) Signed-in user can delete an existing questao document.
     * @deny (delete) User is not signed in, so cannot delete the questao document.
     * @principle Enforces that users must be authenticated to access questao documents.
     */
    match /questoes/{questaoId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Rules for the /respostas_oficiais collection. Requires the user to be authenticated to perform any operations.
     * @path /respostas_oficiais/{respostaOficialId}
     * @allow (create) Signed-in user can create a new respostaOficial document.
     * @deny (create) User is not signed in, so cannot create a new respostaOficial document.
     * @allow (get) Signed-in user can get a respostaOficial document.
     * @deny (get) User is not signed in, so cannot get the respostaOficial document.
     * @allow (list) Signed-in user can list all respostaOficial documents.
     * @deny (list) User is not signed in, so cannot list the respostaOficial documents.
     * @allow (update) Signed-in user can update an existing respostaOficial document.
     * @deny (update) User is not signed in, so cannot update the respostaOficial document.
     * @allow (delete) Signed-in user can delete an existing respostaOficial document.
     * @deny (delete) User is not signed in, so cannot delete the respostaOficial document.
     * @principle Enforces that users must be authenticated to access respostaOficial documents.
     */
    match /respostas_oficiais/{respostaOficialId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Rules for the /respostas_alunos collection. Requires the user to be authenticated to perform any operations.
     * @path /respostas_alunos/{respostaAlunoId}
     * @allow (create) Signed-in user can create a new respostaAluno document.
     * @deny (create) User is not signed in, so cannot create a new respostaAluno document.
     * @allow (get) Signed-in user can get a respostaAluno document.
     * @deny (get) User is not signed in, so cannot get the respostaAluno document.
     * @allow (list) Signed-in user can list all respostaAluno documents.
     * @deny (list) User is not signed in, so cannot list the respostaAluno documents.
     * @allow (update) Signed-in user can update an existing respostaAluno document.
     * @deny (update) User is not signed in, so cannot update the respostaAluno document.
     * @allow (delete) Signed-in user can delete an existing respostaAluno document.
     * @deny (delete) User is not signed in, so cannot delete the respostaAluno document.
     * @principle Enforces that users must be authenticated to access respostaAluno documents.
     */
    match /respostas_alunos/{respostaAlunoId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Rules for the /correcoes collection. Requires the user to be authenticated to perform any operations.
     * @path /correcoes/{correcaoId}
     * @allow (create) Signed-in user can create a new correcao document.
     * @deny (create) User is not signed in, so cannot create a new correcao document.
     * @allow (get) Signed-in user can get a correcao document.
     * @deny (get) User is not signed in, so cannot get the correcao document.
     * @allow (list) Signed-in user can list all correcao documents.
     * @deny (list) User is not signed in, so cannot list the correcao documents.
     * @allow (update) Signed-in user can update an existing correcao document.
     * @deny (update) User is not signed in, so cannot update the correcao document.
     * @allow (delete) Signed-in user can delete an existing correcao document.
     * @deny (delete) User is not signed in, so cannot delete the correcao document.
     * @principle Enforces that users must be authenticated to access correcao documents.
     */
    match /correcoes/{correcaoId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Rules for the /resultados collection. Requires the user to be authenticated to perform any operations.
     * @path /resultados/{resultadoId}
     * @allow (create) Signed-in user can create a new resultado document.
     * @deny (create) User is not signed in, so cannot create a new resultado document.
     * @allow (get) Signed-in user can get a resultado document.
     * @deny (get) User is not signed in, so cannot get the resultado document.
     * @allow (list) Signed-in user can list all resultado documents.
     * @deny (list) User is not signed in, so cannot list the resultado documents.
     * @allow (update) Signed-in user can update an existing resultado document.
     * @deny (update) User is not signed in, so cannot update the resultado document.
     * @allow (delete) Signed-in user can delete an existing resultado document.
     * @deny (delete) User is not signed in, so cannot delete the resultado document.
     * @principle Enforces that users must be authenticated to access resultado documents.
     */
    match /resultados/{resultadoId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    function isSignedIn() {
      return request.auth != null;
    }
  }
}