/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict data isolation model. Each top-level collection is only accessible to authenticated users.
 *
 * Data Structure:
 * The Firestore database consists of several top-level collections:
 * - /alunos/{alunoId}: Stores student data, with each document ID matching the student's user ID.
 * - /escolas/{escolaId}: Stores school data.
 * - /turmas/{turmaId}: Stores class data.
 * - /provas/{provaId}: Stores test data.
 * - /questoes/{questaoId}: Stores question data.
 * - /respostas_oficiais/{respostaOficialId}: Stores official answer data.
 * - /respostas_alunos/{respostaAlunoId}: Stores student answer data.
 * - /correcoes/{correcaoId}: Stores correction data.
 * - /resultados/{resultadoId}: Stores result data.
 *
 * Key Security Decisions:
 * - Listing of collections is explicitly denied to prevent unauthorized data discovery.
 * - All write operations require the user to be authenticated.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces that only authenticated users can read or write student data.
     * @path /alunos/{alunoId}
     * @allow (get, create, update, delete) if isSignedIn() and isOwner(alunoId)
     * @deny (get) if !isSignedIn()
     * @deny (create) if !isSignedIn()
     * @deny (update) if !isSignedIn()
     * @deny (delete) if !isSignedIn()
     * @principle Enforces document ownership for writes.
     */
    match /alunos/{alunoId} {
      allow get: if isSignedIn() && isOwner(alunoId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(alunoId) && request.resource.data.id == alunoId;
      allow update: if isSignedIn() && isExistingOwner(alunoId) && resource.data.id == alunoId;
      allow delete: if isSignedIn() && isExistingOwner(alunoId);
    }

    /**
     * @description Enforces that only authenticated users can read or write school data.
     * @path /escolas/{escolaId}
     * @allow (get, create, update, delete) if isSignedIn()
     * @deny (get) if !isSignedIn()
     * @deny (create) if !isSignedIn()
     * @deny (update) if !isSignedIn()
     * @deny (delete) if !isSignedIn()
     */
    match /escolas/{escolaId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Enforces that only authenticated users can read or write class data.
     * @path /turmas/{turmaId}
     * @allow (get, create, update, delete) if isSignedIn()
     * @deny (list) Everyone, since this was the source of the error.
     * @deny (get) if !isSignedIn()
     * @deny (create) if !isSignedIn()
     * @deny (update) if !isSignedIn()
     * @deny (delete) if !isSignedIn()
     */
    match /turmas/{turmaId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Enforces that only authenticated users can read or write test data.
     * @path /provas/{provaId}
     * @allow (get, create, update, delete) if isSignedIn()
     * @deny (get) if !isSignedIn()
     * @deny (create) if !isSignedIn()
     * @deny (update) if !isSignedIn()
     * @deny (delete) if !isSignedIn()
     */
    match /provas/{provaId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Enforces that only authenticated users can read or write question data.
     * @path /questoes/{questaoId}
     * @allow (get, create, update, delete) if isSignedIn()
     * @deny (get) if !isSignedIn()
     * @deny (create) if !isSignedIn()
     * @deny (update) if !isSignedIn()
     * @deny (delete) if !isSignedIn()
     */
    match /questoes/{questaoId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Enforces that only authenticated users can read or write official answer data.
     * @path /respostas_oficiais/{respostaOficialId}
     * @allow (get, create, update, delete) if isSignedIn()
     * @deny (get) if !isSignedIn()
     * @deny (create) if !isSignedIn()
     * @deny (update) if !isSignedIn()
     * @deny (delete) if !isSignedIn()
     */
    match /respostas_oficiais/{respostaOficialId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Enforces that only authenticated users can read or write student answer data.
     * @path /respostas_alunos/{respostaAlunoId}
     * @allow (get, create, update, delete) if isSignedIn()
     * @deny (get) if !isSignedIn()
     * @deny (create) if !isSignedIn()
     * @deny (update) if !isSignedIn()
     * @deny (delete) if !isSignedIn()
     */
    match /respostas_alunos/{respostaAlunoId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Enforces that only authenticated users can read or write correction data.
     * @path /correcoes/{correcaoId}
     * @allow (get, create, update, delete) if isSignedIn()
     * @deny (get) if !isSignedIn()
     * @deny (create) if !isSignedIn()
     * @deny (update) if !isSignedIn()
     * @deny (delete) if !isSignedIn()
     */
    match /correcoes/{correcaoId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Enforces that only authenticated users can read or write result data.
     * @path /resultados/{resultadoId}
     * @allow (get, create, update, delete) if isSignedIn()
     * @deny (get) if !isSignedIn()
     * @deny (create) if !isSignedIn()
     * @deny (update) if !isSignedIn()
     * @deny (delete) if !isSignedIn()
     */
    match /resultados/{resultadoId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isSignedIn() && isOwner(userId) && resource != null;
    }
  }
}