/**
 * @fileOverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict owner-only access model for all collections. Only the authenticated user whose ID matches the document ID in a given collection can read, create, update, or delete documents in that collection.
 *
 * Data Structure:
 * The Firestore database consists of top-level collections for each entity: `/alunos`, `/escolas`, `/turmas`, `/provas`, `/questoes`, `/respostas_oficiais`, `/respostas_alunos`, `/correcoes`, and `/resultados`. Each document within these collections is identified by its unique ID.
 *
 * Key Security Decisions:
 * - **Owner-Only Access**: All data is considered private, and access is restricted to the owner (i.e., the user whose ID matches the document ID).
 * - **No Public Listing**: Listing of documents is only allowed for the owner.
 * - **Self-Creation**: A user can create their own root document by ensuring the document ID matches their `auth.uid`.
 * - **Prototyping Mode**: Data validation is relaxed to allow for rapid schema iteration. Only authorization-critical fields are validated.
 * - **Auditable and Maintainable Logic**: Complex logic is abstracted into helper functions for clarity.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Enforces owner-only access for the 'alunos' collection.
     * @path /databases/{database}/documents/alunos/{alunoId}
     * @allow (create) User with UID 'aluno123' can create a new aluno document with ID 'aluno123'.
     * @allow (get, update, delete) User with UID 'aluno123' can get, update or delete the aluno document with ID 'aluno123'.
     * @deny (create) User with UID 'otherUser' cannot create a new aluno document with ID 'aluno123'.
     * @deny (get, update, delete) User with UID 'otherUser' cannot get, update or delete the aluno document with ID 'aluno123'.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /alunos/{alunoId} {
      allow get: if isOwner(alunoId);
      allow list: if isOwner(alunoId);
      allow create: if isOwner(alunoId) && request.resource.data.id == alunoId;
      allow update: if isExistingOwner(alunoId) && resource.data.id == alunoId;
      allow delete: if isExistingOwner(alunoId);
    }

    /**
     * @description Enforces owner-only access for the 'escolas' collection.
     * @path /databases/{database}/documents/escolas/{escolaId}
     * @allow (create) User with UID 'escola123' can create a new escola document with ID 'escola123'.
     * @allow (get, update, delete) User with UID 'escola123' can get, update or delete the escola document with ID 'escola123'.
     * @deny (create) User with UID 'otherUser' cannot create a new escola document with ID 'escola123'.
     * @deny (get, update, delete) User with UID 'otherUser' cannot get, update or delete the escola document with ID 'escola123'.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /escolas/{escolaId} {
      allow get: if isOwner(escolaId);
      allow list: if isOwner(escolaId);
      allow create: if isOwner(escolaId) && request.resource.data.id == escolaId;
      allow update: if isExistingOwner(escolaId) && resource.data.id == escolaId;
      allow delete: if isExistingOwner(escolaId);
    }

    /**
     * @description Enforces owner-only access for the 'turmas' collection.
     * @path /databases/{database}/documents/turmas/{turmaId}
     * @allow (create) User with UID 'turma123' can create a new turma document with ID 'turma123'.
     * @allow (get, update, delete) User with UID 'turma123' can get, update or delete the turma document with ID 'turma123'.
     * @deny (create) User with UID 'otherUser' cannot create a new turma document with ID 'turma123'.
     * @deny (get, update, delete) User with UID 'otherUser' cannot get, update or delete the turma document with ID 'turma123'.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /turmas/{turmaId} {
      allow get: if isOwner(turmaId);
      allow list: if isOwner(turmaId);
      allow create: if isOwner(turmaId) && request.resource.data.id == turmaId;
      allow update: if isExistingOwner(turmaId) && resource.data.id == turmaId;
      allow delete: if isExistingOwner(turmaId);
    }

    /**
     * @description Enforces owner-only access for the 'provas' collection.
     * @path /databases/{database}/documents/provas/{provaId}
     * @allow (create) User with UID 'prova123' can create a new prova document with ID 'prova123'.
     * @allow (get, update, delete) User with UID 'prova123' can get, update or delete the prova document with ID 'prova123'.
     * @deny (create) User with UID 'otherUser' cannot create a new prova document with ID 'prova123'.
     * @deny (get, update, delete) User with UID 'otherUser' cannot get, update or delete the prova document with ID 'prova123'.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /provas/{provaId} {
      allow get: if isOwner(provaId);
      allow list: if isOwner(provaId);
      allow create: if isOwner(provaId) && request.resource.data.id == provaId;
      allow update: if isExistingOwner(provaId) && resource.data.id == provaId;
      allow delete: if isExistingOwner(provaId);
    }

    /**
     * @description Enforces owner-only access for the 'questoes' collection.
     * @path /databases/{database}/documents/questoes/{questaoId}
     * @allow (create) User with UID 'questao123' can create a new questao document with ID 'questao123'.
     * @allow (get, update, delete) User with UID 'questao123' can get, update or delete the questao document with ID 'questao123'.
     * @deny (create) User with UID 'otherUser' cannot create a new questao document with ID 'questao123'.
     * @deny (get, update, delete) User with UID 'otherUser' cannot get, update or delete the questao document with ID 'questao123'.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /questoes/{questaoId} {
      allow get: if isOwner(questaoId);
      allow list: if isOwner(questaoId);
      allow create: if isOwner(questaoId) && request.resource.data.id == questaoId;
      allow update: if isExistingOwner(questaoId) && resource.data.id == questaoId;
      allow delete: if isExistingOwner(questaoId);
    }

    /**
     * @description Enforces owner-only access for the 'respostas_oficiais' collection.
     * @path /databases/{database}/documents/respostas_oficiais/{respostaOficialId}
     * @allow (create) User with UID 'respostaOficial123' can create a new respostaOficial document with ID 'respostaOficial123'.
     * @allow (get, update, delete) User with UID 'respostaOficial123' can get, update or delete the respostaOficial document with ID 'respostaOficial123'.
     * @deny (create) User with UID 'otherUser' cannot create a new respostaOficial document with ID 'respostaOficial123'.
     * @deny (get, update, delete) User with UID 'otherUser' cannot get, update or delete the respostaOficial document with ID 'respostaOficial123'.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /respostas_oficiais/{respostaOficialId} {
      allow get: if isOwner(respostaOficialId);
      allow list: if isOwner(respostaOficialId);
      allow create: if isOwner(respostaOficialId) && request.resource.data.id == respostaOficialId;
      allow update: if isExistingOwner(respostaOficialId) && resource.data.id == respostaOficialId;
      allow delete: if isExistingOwner(respostaOficialId);
    }

    /**
     * @description Enforces owner-only access for the 'respostas_alunos' collection.
     * @path /databases/{database}/documents/respostas_alunos/{respostaAlunoId}
     * @allow (create) User with UID 'respostaAluno123' can create a new respostaAluno document with ID 'respostaAluno123'.
     * @allow (get, update, delete) User with UID 'respostaAluno123' can get, update or delete the respostaAluno document with ID 'respostaAluno123'.
     * @deny (create) User with UID 'otherUser' cannot create a new respostaAluno document with ID 'respostaAluno123'.
     * @deny (get, update, delete) User with UID 'otherUser' cannot get, update or delete the respostaAluno document with ID 'respostaAluno123'.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /respostas_alunos/{respostaAlunoId} {
      allow get: if isOwner(respostaAlunoId);
      allow list: if isOwner(respostaAlunoId);
      allow create: if isOwner(respostaAlunoId) && request.resource.data.id == respostaAlunoId;
      allow update: if isExistingOwner(respostaAlunoId) && resource.data.id == respostaAlunoId;
      allow delete: if isExistingOwner(respostaAlunoId);
    }

    /**
     * @description Enforces owner-only access for the 'correcoes' collection.
     * @path /databases/{database}/documents/correcoes/{correcaoId}
     * @allow (create) User with UID 'correcao123' can create a new correcao document with ID 'correcao123'.
     * @allow (get, update, delete) User with UID 'correcao123' can get, update or delete the correcao document with ID 'correcao123'.
     * @deny (create) User with UID 'otherUser' cannot create a new correcao document with ID 'correcao123'.
     * @deny (get, update, delete) User with UID 'otherUser' cannot get, update or delete the correcao document with ID 'correcao123'.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /correcoes/{correcaoId} {
      allow get: if isOwner(correcaoId);
      allow list: if isOwner(correcaoId);
      allow create: if isOwner(correcaoId) && request.resource.data.id == correcaoId;
      allow update: if isExistingOwner(correcaoId) && resource.data.id == correcaoId;
      allow delete: if isExistingOwner(correcaoId);
    }

    /**
     * @description Enforces owner-only access for the 'resultados' collection.
     * @path /databases/{database}/documents/resultados/{resultadoId}
     * @allow (create) User with UID 'resultado123' can create a new resultado document with ID 'resultado123'.
     * @allow (get, update, delete) User with UID 'resultado123' can get, update or delete the resultado document with ID 'resultado123'.
     * @deny (create) User with UID 'otherUser' cannot create a new resultado document with ID 'resultado123'.
     * @deny (get, update, delete) User with UID 'otherUser' cannot get, update or delete the resultado document with ID 'resultado123'.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /resultados/{resultadoId} {
      allow get: if isOwner(resultadoId);
      allow list: if isOwner(resultadoId);
      allow create: if isOwner(resultadoId) && request.resource.data.id == resultadoId;
      allow update: if isExistingOwner(resultadoId) && resource.data.id == resultadoId;
      allow delete: if isExistingOwner(resultadoId);
    }
  }
}