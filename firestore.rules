/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict data isolation model. Each top-level collection is only accessible to authenticated users.
 *
 * Data Structure:
 * The database consists of top-level collections for each entity: `/alunos`, `/escolas`, `/turmas`, `/provas`, `/questoes`, `/respostas_oficiais`, `/respostas_alunos`, `/correcoes`, and `/resultados`. There are no nested subcollections.
 *
 * Key Security Decisions:
 * - All top-level collections require authentication for all operations.
 * - `list` operations are only allowed for authenticated users.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages access to student data.
     * @path /alunos/{alunoId}
     * @allow (create) - Authenticated user creates an aluno with matching ID.
     * @deny (create) - Unauthenticated user attempts to create an aluno.
     * @allow (get, list, update, delete) - Authenticated user attempts to get, list, update or delete an aluno with matching ID.
     * @deny (get, list, update, delete) - Unauthenticated user attempts to get, list, update, or delete an aluno.
     * @principle Enforces document ownership for all operations.
     */
    match /alunos/{alunoId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(alunoId) {
        return request.auth.uid == alunoId;
      }
      function isExistingOwner(alunoId) {
        return isOwner(alunoId) && resource != null;
      }

      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && isOwner(alunoId);
      allow update: if isExistingOwner(alunoId);
      allow delete: if isExistingOwner(alunoId);
    }

    /**
     * @description Manages access to school data.
     * @path /escolas/{escolaId}
     * @allow (create) - Authenticated user creates an escola with matching ID.
     * @deny (create) - Unauthenticated user attempts to create an escola.
     * @allow (get, list, update, delete) - Authenticated user attempts to get, list, update or delete an escola with matching ID.
     * @deny (get, list, update, delete) - Unauthenticated user attempts to get, list, update, or delete an escola.
     * @principle Enforces document ownership for all operations.
     */
    match /escolas/{escolaId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(escolaId) {
        return request.auth.uid == escolaId;
      }
      function isExistingOwner(escolaId) {
        return isOwner(escolaId) && resource != null;
      }

      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && isOwner(escolaId);
      allow update: if isExistingOwner(escolaId);
      allow delete: if isExistingOwner(escolaId);
    }

    /**
     * @description Manages access to class data.
     * @path /turmas/{turmaId}
     * @allow (create) - Authenticated user creates a turma with matching ID.
     * @deny (create) - Unauthenticated user attempts to create a turma.
     * @allow (get, list, update, delete) - Authenticated user attempts to get, list, update or delete a turma with matching ID.
     * @deny (get, list, update, delete) - Unauthenticated user attempts to get, list, update, or delete a turma.
     * @principle Enforces document ownership for all operations.
     */
    match /turmas/{turmaId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(turmaId) {
        return request.auth.uid == turmaId;
      }
      function isExistingOwner(turmaId) {
        return isOwner(turmaId) && resource != null;
      }

      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && isOwner(turmaId);
      allow update: if isExistingOwner(turmaId);
      allow delete: if isExistingOwner(turmaId);
    }

    /**
     * @description Manages access to test data.
     * @path /provas/{provaId}
     * @allow (create) - Authenticated user creates a prova with matching ID.
     * @deny (create) - Unauthenticated user attempts to create a prova.
     * @allow (get, list, update, delete) - Authenticated user attempts to get, list, update or delete a prova with matching ID.
     * @deny (get, list, update, delete) - Unauthenticated user attempts to get, list, update, or delete a prova.
     * @principle Enforces document ownership for all operations.
     */
    match /provas/{provaId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(provaId) {
        return request.auth.uid == provaId;
      }
      function isExistingOwner(provaId) {
        return isOwner(provaId) && resource != null;
      }

      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && isOwner(provaId);
      allow update: if isExistingOwner(provaId);
      allow delete: if isExistingOwner(provaId);
    }

    /**
     * @description Manages access to question data.
     * @path /questoes/{questaoId}
     * @allow (create) - Authenticated user creates a questao with matching ID.
     * @deny (create) - Unauthenticated user attempts to create a questao.
     * @allow (get, list, update, delete) - Authenticated user attempts to get, list, update or delete a questao with matching ID.
     * @deny (get, list, update, delete) - Unauthenticated user attempts to get, list, update, or delete a questao.
     * @principle Enforces document ownership for all operations.
     */
    match /questoes/{questaoId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(questaoId) {
        return request.auth.uid == questaoId;
      }
      function isExistingOwner(questaoId) {
        return isOwner(questaoId) && resource != null;
      }

      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && isOwner(questaoId);
      allow update: if isExistingOwner(questaoId);
      allow delete: if isExistingOwner(questaoId);
    }

    /**
     * @description Manages access to official answer data.
     * @path /respostas_oficiais/{respostaOficialId}
     * @allow (create) - Authenticated user creates a resposta oficial with matching ID.
     * @deny (create) - Unauthenticated user attempts to create a resposta oficial.
     * @allow (get, list, update, delete) - Authenticated user attempts to get, list, update or delete a resposta oficial with matching ID.
     * @deny (get, list, update, delete) - Unauthenticated user attempts to get, list, update, or delete a resposta oficial.
     * @principle Enforces document ownership for all operations.
     */
    match /respostas_oficiais/{respostaOficialId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(respostaOficialId) {
        return request.auth.uid == respostaOficialId;
      }
      function isExistingOwner(respostaOficialId) {
        return isOwner(respostaOficialId) && resource != null;
      }

      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && isOwner(respostaOficialId);
      allow update: if isExistingOwner(respostaOficialId);
      allow delete: if isExistingOwner(respostaOficialId);
    }

    /**
     * @description Manages access to student answer data.
     * @path /respostas_alunos/{respostaAlunoId}
     * @allow (create) - Authenticated user creates a resposta aluno with matching ID.
     * @deny (create) - Unauthenticated user attempts to create a resposta aluno.
     * @allow (get, list, update, delete) - Authenticated user attempts to get, list, update or delete a resposta aluno with matching ID.
     * @deny (get, list, update, delete) - Unauthenticated user attempts to get, list, update, or delete a resposta aluno.
     * @principle Enforces document ownership for all operations.
     */
    match /respostas_alunos/{respostaAlunoId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(respostaAlunoId) {
        return request.auth.uid == respostaAlunoId;
      }
      function isExistingOwner(respostaAlunoId) {
        return isOwner(respostaAlunoId) && resource != null;
      }

      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && isOwner(respostaAlunoId);
      allow update: if isExistingOwner(respostaAlunoId);
      allow delete: if isExistingOwner(respostaAlunoId);
    }

    /**
     * @description Manages access to correction data.
     * @path /correcoes/{correcaoId}
     * @allow (create) - Authenticated user creates a correcao with matching ID.
     * @deny (create) - Unauthenticated user attempts to create a correcao.
     * @allow (get, list, update, delete) - Authenticated user attempts to get, list, update or delete a correcao with matching ID.
     * @deny (get, list, update, delete) - Unauthenticated user attempts to get, list, update, or delete a correcao.
     * @principle Enforces document ownership for all operations.
     */
    match /correcoes/{correcaoId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(correcaoId) {
        return request.auth.uid == correcaoId;
      }
      function isExistingOwner(correcaoId) {
        return isOwner(correcaoId) && resource != null;
      }

      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && isOwner(correcaoId);
      allow update: if isExistingOwner(correcaoId);
      allow delete: if isExistingOwner(correcaoId);
    }

    /**
     * @description Manages access to result data.
     * @path /resultados/{resultadoId}
     * @allow (create) - Authenticated user creates a resultado with matching ID.
     * @deny (create) - Unauthenticated user attempts to create a resultado.
     * @allow (get, list, update, delete) - Authenticated user attempts to get, list, update or delete a resultado with matching ID.
     * @deny (get, list, update, delete) - Unauthenticated user attempts to get, list, update, or delete a resultado.
     * @principle Enforces document ownership for all operations.
     */
    match /resultados/{resultadoId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(resultadoId) {
        return request.auth.uid == resultadoId;
      }
      function isExistingOwner(resultadoId) {
        return isOwner(resultadoId) && resource != null;
      }

      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && isOwner(resultadoId);
      allow update: if isExistingOwner(resultadoId);
      allow delete: if isExistingOwner(resultadoId);
    }
  }
}