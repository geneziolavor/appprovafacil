/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict owner-only access model for all data.
 * All data is stored in top-level collections, with each document ID representing the owner's user ID.
 *
 * Key Security Decisions:
 * - Users can only access data where the document ID matches their authenticated user ID.
 * - No user listing is allowed for any collection.
 * - Default security posture is to deny all access unless explicitly granted.
 * - Data shape is not strictly validated beyond ensuring path consistency.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to alunos collection for owner-only access.
     * @path /alunos/{alunoId}
     * @allow (create) User with UID '1BK1VzkYvUgroBnAZw9BoVeCi922' can create a document where alunoId == '1BK1VzkYvUgroBnAZw9BoVeCi922'.
     * @deny (create) User with UID 'OTHER_USER_ID' cannot create a document where alunoId == '1BK1VzkYvUgroBnAZw9BoVeCi922'.
     * @allow (get, list) User with UID '1BK1VzkYvUgroBnAZw9BoVeCi922' can read document '1BK1VzkYvUgroBnAZw9BoVeCi922'.
     * @deny (get, list) User with UID 'OTHER_USER_ID' cannot read document '1BK1VzkYvUgroBnAZw9BoVeCi922'.
     * @allow (update, delete) User with UID '1BK1VzkYvUgroBnAZw9BoVeCi922' can update/delete document '1BK1VzkYvUgroBnAZw9BoVeCi922'.
     * @deny (update, delete) User with UID 'OTHER_USER_ID' cannot update/delete document '1BK1VzkYvUgroBnAZw9BoVeCi922'.
     * @principle Enforces document ownership for writes and reads, validates path consistency on create.
     */
    match /alunos/{alunoId} {
      // Allow the user to read their own document
      allow get: if isSignedIn() && isOwner(alunoId);
      // Allow the user to list their own documents.
      allow list: if isSignedIn() && isOwner(alunoId);

      // Allow the user to create their own document if the document id matches their user id
      allow create: if isSignedIn() && isOwner(alunoId) && request.resource.data.id == alunoId;
      // Allow the user to update their own document if it exists
      allow update: if isSignedIn() && isExistingOwner(alunoId) && resource.data.id == alunoId;
      // Allow the user to delete their own document if it exists
      allow delete: if isSignedIn() && isExistingOwner(alunoId);
    }

    /**
     * @description Grants access to escolas collection for owner-only access.
     * @path /escolas/{escolaId}
     * @allow (create) User with UID '1BK1VzkYvUgroBnAZw9BoVeCi922' can create a document where escolaId == '1BK1VzkYvUgroBnAZw9BoVeCi922'.
     * @deny (create) User with UID 'OTHER_USER_ID' cannot create a document where escolaId == '1BK1VzkYvUgroBnAZw9BoVeCi922'.
     * @allow (get, list) User with UID '1BK1VzkYvUgroBnAZw9BoVeCi922' can read document '1BK1VzkYvUgroBnAZw9BoVeCi922'.
     * @deny (get, list) User with UID 'OTHER_USER_ID' cannot read document '1BK1VzkYvUgroBnAZw9BoVeCi922'.
     * @allow (update, delete) User with UID '1BK1VzkYvUgroBnAZw9BoVeCi922' can update/delete document '1BK1VzkYvUgroBnAZw9BoVeCi922'.
     * @deny (update, delete) User with UID 'OTHER_USER_ID' cannot update/delete document '1BK1VzkYvUgroBnAZw9BoVeCi922'.
     * @principle Enforces document ownership for writes and reads, validates path consistency on create.
     */
    match /escolas/{escolaId} {
      // Allow the user to read their own document
      allow get: if isSignedIn() && isOwner(escolaId);
      // Allow the user to list their own documents.
      allow list: if isSignedIn() && isOwner(escolaId);

      // Allow the user to create their own document if the document id matches their user id
      allow create: if isSignedIn() && isOwner(escolaId) && request.resource.data.id == escolaId;
      // Allow the user to update their own document if it exists
      allow update: if isSignedIn() && isExistingOwner(escolaId) && resource.data.id == escolaId;
      // Allow the user to delete their own document if it exists
      allow delete: if isSignedIn() && isExistingOwner(escolaId);
    }

    /**
     * @description Grants access to turmas collection for owner-only access.
     * @path /turmas/{turmaId}
     * @allow (create) User with UID '1BK1VzkYvUgroBnAZw9BoVeCi922' can create a document where turmaId == '1BK1VzkYvUgroBnAZw9BoVeCi922'.
     * @deny (create) User with UID 'OTHER_USER_ID' cannot create a document where turmaId == '1BK1VzkYvUgroBnAZw9BoVeCi922'.
     * @allow (get, list) User with UID '1BK1VzkYvUgroBnAZw9BoVeCi922' can read document '1BK1VzkYvUgroBnAZw9BoVeCi922'.
     * @deny (get, list) User with UID 'OTHER_USER_ID' cannot read document '1BK1VzkYvUgroBnAZw9BoVeCi922'.
     * @allow (update, delete) User with UID '1BK1VzkYvUgroBnAZw9BoVeCi922' can update/delete document '1BK1VzkYvUgroBnAZw9BoVeCi922'.
     * @deny (update, delete) User with UID 'OTHER_USER_ID' cannot update/delete document '1BK1VzkYvUgroBnAZw9BoVeCi922'.
     * @principle Enforces document ownership for writes and reads, validates path consistency on create.
     */
    match /turmas/{turmaId} {
      // Allow the user to read their own document
      allow get: if isSignedIn() && isOwner(turmaId);
      // Allow the user to list their own documents.
      allow list: if isSignedIn() && isOwner(turmaId);

      // Allow the user to create their own document if the document id matches their user id
      allow create: if isSignedIn() && isOwner(turmaId) && request.resource.data.id == turmaId;
      // Allow the user to update their own document if it exists
      allow update: if isSignedIn() && isExistingOwner(turmaId) && resource.data.id == turmaId;
      // Allow the user to delete their own document if it exists
      allow delete: if isSignedIn() && isExistingOwner(turmaId);
    }

    /**
     * @description Grants access to provas collection for owner-only access.
     * @path /provas/{provaId}
     * @allow (create) User with UID '1BK1VzkYvUgroBnAZw9BoVeCi922' can create a document where provaId == '1BK1VzkYvUgroBnAZw9BoVeCi922'.
     * @deny (create) User with UID 'OTHER_USER_ID' cannot create a document where provaId == '1BK1VzkYvUgroBnAZw9BoVeCi922'.
     * @allow (get, list) User with UID '1BK1VzkYvUgroBnAZw9BoVeCi922' can read document '1BK1VzkYvUgroBnAZw9BoVeCi922'.
     * @deny (get, list) User with UID 'OTHER_USER_ID' cannot read document '1BK1VzkYvUgroBnAZw9BoVeCi922'.
     * @allow (update, delete) User with UID '1BK1VzkYvUgroBnAZw9BoVeCi922' can update/delete document '1BK1VzkYvUgroBnAZw9BoVeCi922'.
     * @deny (update, delete) User with UID 'OTHER_USER_ID' cannot update/delete document '1BK1VzkYvUgroBnAZw9BoVeCi922'.
     * @principle Enforces document ownership for writes and reads, validates path consistency on create.
     */
    match /provas/{provaId} {
      // Allow the user to read their own document
      allow get: if isSignedIn() && isOwner(provaId);
      // Allow the user to list their own documents.
      allow list: if isSignedIn() && isOwner(provaId);

      // Allow the user to create their own document if the document id matches their user id
      allow create: if isSignedIn() && isOwner(provaId) && request.resource.data.id == provaId;
      // Allow the user to update their own document if it exists
      allow update: if isSignedIn() && isExistingOwner(provaId) && resource.data.id == provaId;
      // Allow the user to delete their own document if it exists
      allow delete: if isSignedIn() && isExistingOwner(provaId);
    }

    /**
     * @description Grants access to questoes collection for owner-only access.
     * @path /questoes/{questaoId}
     * @allow (create) User with UID '1BK1VzkYvUgroBnAZw9BoVeCi922' can create a document where questaoId == '1BK1VzkYvUgroBnAZw9BoVeCi922'.
     * @deny (create) User with UID 'OTHER_USER_ID' cannot create a document where questaoId == '1BK1VzkYvUgroBnAZw9BoVeCi922'.
     * @allow (get, list) User with UID '1BK1VzkYvUgroBnAZw9BoVeCi922' can read document '1BK1VzkYvUgroBnAZw9BoVeCi922'.
     * @deny (get, list) User with UID 'OTHER_USER_ID' cannot read document '1BK1VzkYvUgroBnAZw9BoVeCi922'.
     * @allow (update, delete) User with UID '1BK1VzkYvUgroBnAZw9BoVeCi922' can update/delete document '1BK1VzkYvUgroBnAZw9BoVeCi922'.
     * @deny (update, delete) User with UID 'OTHER_USER_ID' cannot update/delete document '1BK1VzkYvUgroBnAZw9BoVeCi922'.
     * @principle Enforces document ownership for writes and reads, validates path consistency on create.
     */
    match /questoes/{questaoId} {
      // Allow the user to read their own document
      allow get: if isSignedIn() && isOwner(questaoId);
      // Allow the user to list their own documents.
      allow list: if isSignedIn() && isOwner(questaoId);

      // Allow the user to create their own document if the document id matches their user id
      allow create: if isSignedIn() && isOwner(questaoId) && request.resource.data.id == questaoId;
      // Allow the user to update their own document if it exists
      allow update: if isSignedIn() && isExistingOwner(questaoId) && resource.data.id == questaoId;
      // Allow the user to delete their own document if it exists
      allow delete: if isSignedIn() && isExistingOwner(questaoId);
    }

    /**
     * @description Grants access to respostas_oficiais collection for owner-only access.
     * @path /respostas_oficiais/{respostaOficialId}
     * @allow (create) User with UID '1BK1VzkYvUgroBnAZw9BoVeCi922' can create a document where respostaOficialId == '1BK1VzkYvUgroBnAZw9BoVeCi922'.
     * @deny (create) User with UID 'OTHER_USER_ID' cannot create a document where respostaOficialId == '1BK1VzkYvUgroBnAZw9BoVeCi922'.
     * @allow (get, list) User with UID '1BK1VzkYvUgroBnAZw9BoVeCi922' can read document '1BK1VzkYvUgroBnAZw9BoVeCi922'.
     * @deny (get, list) User with UID 'OTHER_USER_ID' cannot read document '1BK1VzkYvUgroBnAZw9BoVeCi922'.
     * @allow (update, delete) User with UID '1BK1VzkYvUgroBnAZw9BoVeCi922' can update/delete document '1BK1VzkYvUgroBnAZw9BoVeCi922'.
     * @deny (update, delete) User with UID 'OTHER_USER_ID' cannot update/delete document '1BK1VzkYvUgroBnAZw9BoVeCi922'.
     * @principle Enforces document ownership for writes and reads, validates path consistency on create.
     */
    match /respostas_oficiais/{respostaOficialId} {
      // Allow the user to read their own document
      allow get: if isSignedIn() && isOwner(respostaOficialId);
      // Allow the user to list their own documents.
      allow list: if isSignedIn() && isOwner(respostaOficialId);

      // Allow the user to create their own document if the document id matches their user id
      allow create: if isSignedIn() && isOwner(respostaOficialId) && request.resource.data.id == respostaOficialId;
      // Allow the user to update their own document if it exists
      allow update: if isSignedIn() && isExistingOwner(respostaOficialId) && resource.data.id == respostaOficialId;
      // Allow the user to delete their own document if it exists
      allow delete: if isSignedIn() && isExistingOwner(respostaOficialId);
    }

    /**
     * @description Grants access to respostas_alunos collection for owner-only access.
     * @path /respostas_alunos/{respostaAlunoId}
     * @allow (create) User with UID '1BK1VzkYvUgroBnAZw9BoVeCi922' can create a document where respostaAlunoId == '1BK1VzkYvUgroBnAZw9BoVeCi922'.
     * @deny (create) User with UID 'OTHER_USER_ID' cannot create a document where respostaAlunoId == '1BK1VzkYvUgroBnAZw9BoVeCi922'.
     * @allow (get, list) User with UID '1BK1VzkYvUgroBnAZw9BoVeCi922' can read document '1BK1VzkYvUgroBnAZw9BoVeCi922'.
     * @deny (get, list) User with UID 'OTHER_USER_ID' cannot read document '1BK1VzkYvUgroBnAZw9BoVeCi922'.
     * @allow (update, delete) User with UID '1BK1VzkYvUgroBnAZw9BoVeCi922' can update/delete document '1BK1VzkYvUgroBnAZw9BoVeCi922'.
     * @deny (update, delete) User with UID 'OTHER_USER_ID' cannot update/delete document '1BK1VzkYvUgroBnAZw9BoVeCi922'.
     * @principle Enforces document ownership for writes and reads, validates path consistency on create.
     */
    match /respostas_alunos/{respostaAlunoId} {
      // Allow the user to read their own document
      allow get: if isSignedIn() && isOwner(respostaAlunoId);
      // Allow the user to list their own documents.
      allow list: if isSignedIn() && isOwner(respostaAlunoId);

      // Allow the user to create their own document if the document id matches their user id
      allow create: if isSignedIn() && isOwner(respostaAlunoId) && request.resource.data.id == respostaAlunoId;
      // Allow the user to update their own document if it exists
      allow update: if isSignedIn() && isExistingOwner(respostaAlunoId) && resource.data.id == respostaAlunoId;
      // Allow the user to delete their own document if it exists
      allow delete: if isSignedIn() && isExistingOwner(respostaAlunoId);
    }

    /**
     * @description Grants access to correcoes collection for owner-only access.
     * @path /correcoes/{correcaoId}
     * @allow (create) User with UID '1BK1VzkYvUgroBnAZw9BoVeCi922' can create a document where correcaoId == '1BK1VzkYvUgroBnAZw9BoVeCi922'.
     * @deny (create) User with UID 'OTHER_USER_ID' cannot create a document where correcaoId == '1BK1VzkYvUgroBnAZw9BoVeCi922'.
     * @allow (get, list) User with UID '1BK1VzkYvUgroBnAZw9BoVeCi922' can read document '1BK1VzkYvUgroBnAZw9BoVeCi922'.
     * @deny (get, list) User with UID 'OTHER_USER_ID' cannot read document '1BK1VzkYvUgroBnAZw9BoVeCi922'.
     * @allow (update, delete) User with UID '1BK1VzkYvUgroBnAZw9BoVeCi922' can update/delete document '1BK1VzkYvUgroBnAZw9BoVeCi922'.
     * @deny (update, delete) User with UID 'OTHER_USER_ID' cannot update/delete document '1BK1VzkYvUgroBnAZw9BoVeCi922'.
     * @principle Enforces document ownership for writes and reads, validates path consistency on create.
     */
    match /correcoes/{correcaoId} {
      // Allow the user to read their own document
      allow get: if isSignedIn() && isOwner(correcaoId);
      // Allow the user to list their own documents.
      allow list: if isSignedIn() && isOwner(correcaoId);

      // Allow the user to create their own document if the document id matches their user id
      allow create: if isSignedIn() && isOwner(correcaoId) && request.resource.data.id == correcaoId;
      // Allow the user to update their own document if it exists
      allow update: if isSignedIn() && isExistingOwner(correcaoId) && resource.data.id == correcaoId;
      // Allow the user to delete their own document if it exists
      allow delete: if isSignedIn() && isExistingOwner(correcaoId);
    }

    /**
     * @description Grants access to resultados collection for owner-only access.
     * @path /resultados/{resultadoId}
     * @allow (create) User with UID '1BK1VzkYvUgroBnAZw9BoVeCi922' can create a document where resultadoId == '1BK1VzkYvUgroBnAZw9BoVeCi922'.
     * @deny (create) User with UID 'OTHER_USER_ID' cannot create a document where resultadoId == '1BK1VzkYvUgroBnAZw9BoVeCi922'.
     * @allow (get, list) User with UID '1BK1VzkYvUgroBnAZw9BoVeCi922' can read document '1BK1VzkYvUgroBnAZw9BoVeCi922'.
     * @deny (get, list) User with UID 'OTHER_USER_ID' cannot read document '1BK1VzkYvUgroBnAZw9BoVeCi922'.
     * @allow (update, delete) User with UID '1BK1VzkYvUgroBnAZw9BoVeCi922' can update/delete document '1BK1VzkYvUgroBnAZw9BoVeCi922'.
     * @deny (update, delete) User with UID 'OTHER_USER_ID' cannot update/delete document '1BK1VzkYvUgroBnAZw9BoVeCi922'.
     * @principle Enforces document ownership for writes and reads, validates path consistency on create.
     */
    match /resultados/{resultadoId} {
      // Allow the user to read their own document
      allow get: if isSignedIn() && isOwner(resultadoId);
      // Allow the user to list their own documents.
      allow list: if isSignedIn() && isOwner(resultadoId);

      // Allow the user to create their own document if the document id matches their user id
      allow create: if isSignedIn() && isOwner(resultadoId) && request.resource.data.id == resultadoId;
      // Allow the user to update their own document if it exists
      allow update: if isSignedIn() && isExistingOwner(resultadoId) && resource.data.id == resultadoId;
      // Allow the user to delete their own document if it exists
      allow delete: if isSignedIn() && isExistingOwner(resultadoId);
    }
  }

  // Helper function to determine if the user is signed in
  function isSignedIn() {
    return request.auth != null;
  }

  // Helper function to determine if the user is the owner of the document
  function isOwner(userId) {
    return request.auth.uid == userId;
  }

    // Helper function to determine if the user is the owner of the document, and the document exists
  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}