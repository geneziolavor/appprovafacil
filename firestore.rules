/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict data-privacy model. Only authenticated users can access data.
 * All entities reside in top-level collections, and access is granted on a per-collection basis.
 *
 * Data Structure:
 * All data is stored in top-level collections (e.g., /alunos/{alunoId}, /escolas/{escolaId}).
 *
 * Key Security Decisions:
 * - Listing collections is allowed for authenticated users by default.
 * - There are no special admin roles or shared documents in this initial prototype.
 * - All writes are denied by default and must be explicitly allowed by a rule.
 *
 * Authorization notes:
 * - All collections are treated as private, requiring authentication for access.
 * - The rules do not perform schema validation beyond authorization-critical fields.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages access to the 'alunos' collection.
     * @path /alunos/{alunoId}
     * @allow (read): Authenticated user can read any aluno document.
     * @allow (create): Authenticated user can create an aluno document.
     * @deny (read): Non-authenticated user cannot read any aluno document.
     * @deny (create): Non-authenticated user cannot create any aluno document.
     * @principle Path-based authorization ensures that only authenticated users can manage aluno documents.
     */
    match /alunos/{alunoId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if false; // TODO: Add owner validation if the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation if the schema is updated with an ownership field.
    }

    /**
     * @description Manages access to the 'escolas' collection.
     * @path /escolas/{escolaId}
     * @allow (read): Authenticated user can read any escola document.
     * @allow (create): Authenticated user can create an escola document.
     * @deny (read): Non-authenticated user cannot read any escola document.
     * @deny (create): Non-authenticated user cannot create any escola document.
     * @principle Path-based authorization ensures that only authenticated users can manage escola documents.
     */
    match /escolas/{escolaId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if false; // TODO: Add owner validation if the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation if the schema is updated with an ownership field.
    }

    /**
     * @description Manages access to the 'turmas' collection.
     * @path /turmas/{turmaId}
     * @allow (read): Authenticated user can read any turma document.
     * @allow (create): Authenticated user can create a turma document.
     * @deny (read): Non-authenticated user cannot read any turma document.
     * @deny (create): Non-authenticated user cannot create any turma document.
     * @principle Path-based authorization ensures that only authenticated users can manage turma documents.
     */
    match /turmas/{turmaId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if false; // TODO: Add owner validation if the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation if the schema is updated with an ownership field.
    }

    /**
     * @description Manages access to the 'provas' collection.
     * @path /provas/{provaId}
     * @allow (read): Authenticated user can read any prova document.
     * @allow (create): Authenticated user can create a prova document.
     * @deny (read): Non-authenticated user cannot read any prova document.
     * @deny (create): Non-authenticated user cannot create any prova document.
     * @principle Path-based authorization ensures that only authenticated users can manage prova documents.
     */
    match /provas/{provaId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if false; // TODO: Add owner validation if the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation if the schema is updated with an ownership field.
    }

    /**
     * @description Manages access to the 'questoes' collection.
     * @path /questoes/{questaoId}
     * @allow (read): Authenticated user can read any questao document.
     * @allow (create): Authenticated user can create a questao document.
     * @deny (read): Non-authenticated user cannot read any questao document.
     * @deny (create): Non-authenticated user cannot create any questao document.
     * @principle Path-based authorization ensures that only authenticated users can manage questao documents.
     */
    match /questoes/{questaoId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if false; // TODO: Add owner validation if the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation if the schema is updated with an ownership field.
    }

    /**
     * @description Manages access to the 'respostas_oficiais' collection.
     * @path /respostas_oficiais/{respostaOficialId}
     * @allow (read): Authenticated user can read any resposta_oficial document.
     * @allow (create): Authenticated user can create a resposta_oficial document.
     * @deny (read): Non-authenticated user cannot read any resposta_oficial document.
     * @deny (create): Non-authenticated user cannot create any resposta_oficial document.
     * @principle Path-based authorization ensures that only authenticated users can manage respostas_oficiais documents.
     */
    match /respostas_oficiais/{respostaOficialId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if false; // TODO: Add owner validation if the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation if the schema is updated with an ownership field.
    }

    /**
     * @description Manages access to the 'respostas_alunos' collection.
     * @path /respostas_alunos/{respostaAlunoId}
     * @allow (read): Authenticated user can read any resposta_aluno document.
     * @allow (create): Authenticated user can create a resposta_aluno document.
     * @deny (read): Non-authenticated user cannot read any resposta_aluno document.
     * @deny (create): Non-authenticated user cannot create any resposta_aluno document.
     * @principle Path-based authorization ensures that only authenticated users can manage respostas_alunos documents.
     */
    match /respostas_alunos/{respostaAlunoId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if false; // TODO: Add owner validation if the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation if the schema is updated with an ownership field.
    }

    /**
     * @description Manages access to the 'correcoes' collection.
     * @path /correcoes/{correcaoId}
     * @allow (read): Authenticated user can read any correcao document.
     * @allow (create): Authenticated user can create a correcao document.
     * @deny (read): Non-authenticated user cannot read any correcao document.
     * @deny (create): Non-authenticated user cannot create any correcao document.
     * @principle Path-based authorization ensures that only authenticated users can manage correcoes documents.
     */
    match /correcoes/{correcaoId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if false; // TODO: Add owner validation if the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation if the schema is updated with an ownership field.
    }

    /**
     * @description Manages access to the 'resultados' collection.
     * @path /resultados/{resultadoId}
     * @allow (read): Authenticated user can read any resultado document.
     * @allow (create): Authenticated user can create a resultado document.
     * @deny (read): Non-authenticated user cannot read any resultado document.
     * @deny (create): Non-authenticated user cannot create any resultado document.
     * @principle Path-based authorization ensures that only authenticated users can manage resultados documents.
     */
    match /resultados/{resultadoId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if false; // TODO: Add owner validation if the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation if the schema is updated with an ownership field.
    }
  }

  function isSignedIn() {
    return request.auth != null;
  }
}